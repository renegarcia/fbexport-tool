{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":"<p><code>Fbexport tool</code> is a thin wrapper for fbexport, which is a program that exports and imports data from Firebird databases. The aim is to simplify the use of fbexport to extract a selection of tables in <code>csv</code> format. </p>"},{"location":"#requirements","title":"Requirements","text":"<p>There is only one required program, </p> <ul> <li><code>fbexport</code></li> </ul> <p>which is called to backup a database. If you want to build the documentation then  the following python packages are necessary.</p> <ul> <li><code>mkdocs</code></li> <li><code>mkdocstrings</code></li> <li><code>mkdocs-material</code></li> </ul> <p>Dependencies are handled by poetry, in adition, I use  <code>pytest</code> for testing, but this is only a commodity as all testing is done by  doctest. </p>"},{"location":"#installation","title":"Installation","text":"<p>Running </p> <pre><code>poetry install --no-root\n</code></pre> <p>should install a script <code>fbexport-tool</code> in your current virtual envirnoment. </p>"},{"location":"#usage","title":"Usage","text":"<p>First, make sure <code>fbexport</code> is installed somewhere in your path. </p> <p>The input to this program is a firebird database and a text file whose content is a list of space separated names of the tables to be exported from the database. Alternatively, you can pass the table names as extra arguments to the command. Note that it is possible to mix both the file and the list of names in the same calling to the program.</p>"},{"location":"#example","title":"Example","text":"<p>Given the following content in the current directory </p> <pre><code>database.fbd\ntables.txt\n</code></pre> <p>where the content of <code>tables.txt</code> is </p> <pre><code>TABLE1\nTABLE2\n\"SOME OTHER TABLE\"\n</code></pre> <p>then calling </p> <pre><code>fbexport-tool databse.fbd --tables tables.txt\n</code></pre> <p>will result in a new directory named <code>YYYY-MM-DD-HH-MM-SS-database</code> where <code>YYYY-MM-DD-HH-MM-SS</code> is the system timestamp when the program was invoked and  whose content consists of three csv files </p> <pre><code>YYYY-MM-DD-HH-MM-SS-database\n|\n|-- table1.csv\n|-- table2.csv\n|-- some_other_table.csv\n</code></pre> <p>with the data of each table backed up.</p>"},{"location":"references/","title":"References","text":"<p>Documentation extracted from the docstrings.</p>"},{"location":"references/#fbexport_tool--fbexport-tool","title":"Fbexport Tool","text":"<p>A tool to export data from a firebird database in bulk. Run <code>fbexport-tool.py -h</code> to see details on how to use.</p> <p>The input to this program is an fdb database and a text file with a list of space separated names of tables to be exported or a list of the names of such tables.</p> <p>This is a thin wrap around <code>fbexport</code>, so you will need to install it before. In case your OS does not ship with this programm, see</p> <p>http://www.firebirdfaq.org/fbexport.php</p>"},{"location":"references/#fbexport_tool.export_cmd","title":"<code>export_cmd(database, destination, table, password='masterkey')</code>","text":"<p>return a <code>fbexport</code> statement suitable for use in the terminal.</p> <p>Parameters</p> <p>@param database: Database location or path. @password @destination: Output location or path. @table: The name of the table to export.</p> <p>Returns</p> <p>A string representing the command that should be executed to commit the export.</p> <p>Example</p> <p>export_cmd('database.fbd', destination='database.csv', table='MYTABLE') ['fbexport', '-H', '', '-Sc', '-J', 'Y-M-D', '-D', 'database.fbd', '-F', 'database.csv', '-V', 'MYTABLE']</p> Source code in <code>fbexport_tool.py</code> <pre><code>def export_cmd(\n    database: str, destination: str, table: str, password: str = \"masterkey\"\n) -&gt; list[str]:\n\"\"\"\n    return a `fbexport` statement suitable for use in the terminal.\n\n    Parameters\n\n    @param database: Database location or path.\n    @password\n    @destination: Output location or path.\n    @table: The name of the table to export.\n\n    Returns\n\n    A string representing the command that should be executed to commit the export.\n\n    Example\n\n    &gt;&gt;&gt; export_cmd('database.fbd', destination='database.csv', table='MYTABLE')\n    ['fbexport', '-H', '', '-Sc', '-J', 'Y-M-D', '-D', 'database.fbd', '-F', 'database.csv', '-V', 'MYTABLE']\n    \"\"\"\n    return [\n        \"fbexport\",\n        \"-H\",\n        \"\",\n        \"-Sc\",\n        \"-J\",\n        \"Y-M-D\",\n        \"-D\",\n        database,\n        \"-F\",\n        destination,\n        \"-V\",\n        table,\n    ]\n</code></pre>"},{"location":"references/#fbexport_tool.iter_words","title":"<code>iter_words(stream)</code>","text":"<p>Return an iterator to the words contained in <code>stream</code>.</p> <p>Example</p> <p>from io import StringIO buffer = StringIO(initial_value=' word1 word2 \\n word3 ') [w for w in iter_words(buffer)] ['word1', 'word2', 'word3']</p> Source code in <code>fbexport_tool.py</code> <pre><code>def iter_words(stream: io.TextIOWrapper) -&gt; Iterator[str]:\n\"\"\"\n    Return an iterator to the words contained in `stream`.\n\n    Example\n\n    &gt;&gt;&gt; from io import StringIO\n    &gt;&gt;&gt; buffer = StringIO(initial_value=' word1 word2 \\\\n word3 ')\n    &gt;&gt;&gt; [w for w in iter_words(buffer)]\n    ['word1', 'word2', 'word3']\n    \"\"\"\n    for line in stream:\n        for word in line.split():\n            yield word\n</code></pre>"},{"location":"references/#fbexport_tool.outputdir_filename","title":"<code>outputdir_filename(database, when)</code>","text":"<p>Returns the name of the output directory in format YYYY-MM-DD-hh-mm-ss-database with the database suffix removed. If the database name has spaces they are replaced by underscores (i.e. <code>\"database name\".fdb</code> is replaced by <code>database_name</code>)</p> <p>Example</p> <p>from datetime import datetime when = datetime(2023, 1, 1, 14,0,0) outputdir_filename('database.fdb', when) '2023-01-01-14-00-00-database'</p> <p>outputdir_filename('another database.fdb', when) '2023-01-01-14-00-00-another_database'</p> Source code in <code>fbexport_tool.py</code> <pre><code>def outputdir_filename(database: Path | str, when: datetime) -&gt; str:\n\"\"\"\n    Returns the name of the output directory in format YYYY-MM-DD-hh-mm-ss-database\n    with the database suffix removed.\n    If the database name has spaces they are replaced by underscores (i.e. `\"database name\".fdb` is replaced by `database_name`)\n\n    Example\n\n    &gt;&gt;&gt; from datetime import datetime\n    &gt;&gt;&gt; when = datetime(2023, 1, 1, 14,0,0)\n    &gt;&gt;&gt; outputdir_filename('database.fdb', when)\n    '2023-01-01-14-00-00-database'\n\n    &gt;&gt;&gt; outputdir_filename('another database.fdb', when)\n    '2023-01-01-14-00-00-another_database'\n    \"\"\"\n    if isinstance(database, str):\n        database = Path(database)\n    dtime = when.strftime(\"%Y-%m-%d-%H-%M-%S\")\n    fname = database.stem.replace(\" \", \"_\")\n    return f\"{dtime}-{fname}\"\n</code></pre>"},{"location":"references/#fbexport_tool.table_csv_filename","title":"<code>table_csv_filename(tablename)</code>","text":"<p>Returns a sanitized version of the name of a table. The name is converted to lowercase, any space is replaced by underscores and special caracters like quotes are stripped away.</p> <p>Examples</p> <p>table_csv_filename('TABLE') 'table.csv'</p> <p>table_csv_filename('A TABLE') 'a_table.csv'</p> <p>table_csv_filename('\"Decimal\"') 'decimal.csv'</p> Source code in <code>fbexport_tool.py</code> <pre><code>def table_csv_filename(tablename: str) -&gt; str:\n\"\"\"\n    Returns a sanitized version of the name of a table. The name is converted to\n    lowercase, any space is replaced by underscores and special caracters like\n    quotes are stripped away.\n\n    Examples\n\n    &gt;&gt;&gt; table_csv_filename('TABLE')\n    'table.csv'\n\n    &gt;&gt;&gt; table_csv_filename('A TABLE')\n    'a_table.csv'\n\n    &gt;&gt;&gt; table_csv_filename('\"Decimal\"')\n    'decimal.csv'\n    \"\"\"\n    translation_table = str.maketrans(\"\", \"\", string.punctuation)\n    cleaned = tablename.translate(translation_table)\n    return cleaned.replace(\" \", \"_\").lower() + \".csv\"\n    return tablename\n</code></pre>"}]}